{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11077614,"sourceType":"datasetVersion","datasetId":6871270}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"pip install nltk wordcloud sentence_transformers torch\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T15:02:16.792840Z","iopub.execute_input":"2025-03-20T15:02:16.793201Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (3.2.4)\nRequirement already satisfied: wordcloud in /usr/local/lib/python3.10/dist-packages (1.9.4)\nRequirement already satisfied: sentence_transformers in /usr/local/lib/python3.10/dist-packages (3.3.1)\nRequirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.5.1+cu121)\nRequirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from nltk) (1.17.0)\nRequirement already satisfied: numpy>=1.6.1 in /usr/local/lib/python3.10/dist-packages (from wordcloud) (1.26.4)\nRequirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (from wordcloud) (11.0.0)\nRequirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from wordcloud) (3.7.5)\nRequirement already satisfied: transformers<5.0.0,>=4.41.0 in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (4.47.0)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (4.67.1)\nRequirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (1.2.2)\nRequirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (1.13.1)\nRequirement already satisfied: huggingface-hub>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (0.29.0)\nRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.17.0)\nRequirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.12.2)\nRequirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.4.2)\nRequirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\nRequirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2024.12.0)\nRequirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.10/dist-packages (from torch) (1.13.1)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy==1.13.1->torch) (1.3.0)\nRequirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (24.2)\nRequirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (6.0.2)\nRequirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (2.32.3)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (2.4.1)\nRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.41.0->sentence_transformers) (2024.11.6)\nRequirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.41.0->sentence_transformers) (0.21.0)\nRequirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.41.0->sentence_transformers) (0.4.5)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (3.0.2)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (1.3.1)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (4.55.3)\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (1.4.7)\nRequirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (3.2.0)\nRequirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (2.9.0.post0)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->sentence_transformers) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->sentence_transformers) (3.5.0)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.6.1->wordcloud) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.6.1->wordcloud) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.6.1->wordcloud) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.6.1->wordcloud) (2024.2.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (2025.1.31)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.6.1->wordcloud) (2024.2.0)\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Loading necessary libraries.**","metadata":{}},{"cell_type":"code","source":"import pandas as pd \nimport seaborn as sns \nimport matplotlib.pyplot as plt \nimport nltk\nfrom nltk.corpus import stopwords\nimport torch\nfrom transformers import pipeline , AutoTokenizer , AutoModelForSequenceClassification\nimport warnings\nwarnings.filterwarnings('ignore')\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Loading the data**","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/airline-al-arabia-customer-reviews/df_cleaned.csv')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['review'] = df['review'].str[:800]\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.drop(df.columns[0],axis=1,inplace=True)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Data Overview**","metadata":{}},{"cell_type":"code","source":"df.isna().sum().plot(kind='bar')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"columns = ['verified', 'Type Of Traveller','Seat Type']\n\n\nfig , ax = plt.subplots(1,3,figsize=(18, 5))\nax = ax.flatten()\n\nfor i , col in enumerate(columns):\n    sns.countplot(df,x=col,hue=col,palette='Paired',width=0.6,dodge=False,ax=ax[i])\n    ax[i].set_title(f'distrubiton of Customers by {col}')\n    ax[i].legend().set_visible(False)\nplt.tight_layout()  ","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"columns  =  [ 'Seat Comfort', 'Cabin Staff Service', 'Ground Service',\n       'Value For Money', 'Recommended', 'Food & Beverages']\nprofessional_palette = ['#003366', '#006699', '#33B5E5', '#99CCFF', '#99CC99', '#669966']\n\n\nfig , ax = plt.subplots(3,2,figsize=(20,10))\nax = ax.flatten()\nfor i , col in enumerate(columns):\n    count_data = df[col].value_counts().sort_index()\n    max_value_index = count_data.idxmax()\n    explode = [0.1 if x == max_value_index else 0 for x in count_data.index]\n    ax[i].pie(count_data,labels = count_data.index,colors = professional_palette,explode=explode)\n    if i == 4 :\n        ax[i].set_title(f'distribution Customers recommendation')\n    else :    \n        ax[i].set_title(f'distribution of ratings for {col}')\nplt.tight_layout()    ","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Loading the sentiment analysis model from HuggingFace and set device.**","metadata":{}},{"cell_type":"code","source":"device = torch.cuda.current_device() if torch.cuda.is_available() else 'cpu'\nprint(device)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# sentiment analysis model\nmodel_id = \"cardiffnlp/twitter-roberta-base-sentiment-latest\"\nmodel = AutoModelForSequenceClassification.from_pretrained(model_id,num_labels=3)\n                                                        \n# loading the tokenizer from Haggingface                                                     \ntokenizer = AutoTokenizer.from_pretrained(model_id)\n\nNLP = pipeline(\"sentiment-analysis\",\n              model=model,\n              tokenizer=tokenizer,\n              device=device)\nNLP","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"labels = {\"LABEL_0\":\"negative\",\n         \"LABEL_1\":\"neutral\",\n         \"LABEL_2\":\"positive\"}","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test = df['review'][200]\nprint(test,NLP(test))\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Define a function to extract sentiment from text\ndef get_sentiment(text):\n    result = NLP(text)[0]\n    return result['label'], result['score']\n\n# Apply the function to each row\ndf[['sentiment', 'confidence']] = df['review'].apply(lambda x: pd.Series(get_sentiment(x)))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from tqdm.auto import tqdm","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"results = [NLP(review)[0] for review in tqdm(df['review'].tolist())]\ndf['sentiment'] = [res['label'] for res in results]\ndf['confidence'] = [res['score'] for res in results]\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head(5)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Sentiment Overview**","metadata":{}},{"cell_type":"code","source":"sns.set_theme(style=\"ticks\")\npalette = sns.color_palette('colorblind')\nfeatures = ['Seat Comfort', 'Cabin Staff Service', 'Ground Service', 'Value For Money']\nfig, axes = plt.subplots(2, 2, figsize=(15, 7.5))\naxes = axes.flatten()\n\nfor i, feature in enumerate(features):\n    sentiment_counts = pd.crosstab(df[feature], df['sentiment'])\n    sentiment_counts.plot(kind='bar', stacked=True, ax=axes[i], color = palette)\n    axes[i].set_title(f'Sentiment Distribution for {feature}')\n    axes[i].set_xlabel(f'{feature} Rating')\n    axes[i].set_ylabel('Count')\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(8,4))\nsns.countplot(df,x=\"sentiment\",palette=\"colorblind\",hue='sentiment')\nplt.title('sentiment ditribution')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Sentiment by Traveller Type**","metadata":{}},{"cell_type":"code","source":"from IPython.display import  Markdown","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"traveller_types = df['Type Of Traveller'].unique()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"display(Markdown('### **Sentiment By Type Of Traveller**'))\nfig , ax = plt.subplots(1,4,figsize=(20,10))\nax = ax.flatten()\npalette = sns.color_palette('colorblind')\nexplode = [0,0.1,0]\nfor i , value in enumerate(traveller_types):\n    sentiment_count = df[df['Type Of Traveller']==value]['sentiment'].value_counts()\n    ax[i].pie(sentiment_count,labels = sentiment_count.index,colors=palette,explode=explode,autopct = '%1.2F%%')\n    ax[i].set_title(f'{value} Customers sentiments')\nplt.tight_layout()    ","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['Seat Type'].unique()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"display(Markdown('### **Sentiment by Customer seat type**'))\nfig , ax = plt.subplots(1,4,figsize=(20,10))\nax = ax.flatten()\npalette = sns.color_palette('colorblind')\nseats = df['Seat Type'].unique() \nfor i , value in enumerate(seats):\n    sentiment_count = df[df['Seat Type']==value]['sentiment'].value_counts()\n    idx_max = sentiment_count.idxmax()\n    explode = [0.1 if x == idx_max else 0 for x in sentiment_count.index]\n    ax[i].pie(sentiment_count,labels = sentiment_count.index,colors=palette,explode=explode,autopct = '%1.2F%%')\n    ax[i].set_title(f'{value} Customers sentiments')\nplt.tight_layout()  ","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['year'].unique()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.lineplot(df)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}