{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1c4f2f62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T17:27:43.325327Z",
     "iopub.status.busy": "2025-03-18T17:27:43.324997Z",
     "iopub.status.idle": "2025-03-18T17:27:48.613071Z",
     "shell.execute_reply": "2025-03-18T17:27:48.611854Z"
    },
    "papermill": {
     "duration": 5.293919,
     "end_time": "2025-03-18T17:27:48.614730",
     "exception": false,
     "start_time": "2025-03-18T17:27:43.320811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (3.2.4)\r\n",
      "Requirement already satisfied: wordcloud in /usr/local/lib/python3.10/dist-packages (1.9.4)\r\n",
      "Requirement already satisfied: sentence_transformers in /usr/local/lib/python3.10/dist-packages (3.3.1)\r\n",
      "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.5.1+cu121)\r\n",
      "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from nltk) (1.17.0)\r\n",
      "Requirement already satisfied: numpy>=1.6.1 in /usr/local/lib/python3.10/dist-packages (from wordcloud) (1.26.4)\r\n",
      "Requirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (from wordcloud) (11.0.0)\r\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from wordcloud) (3.7.5)\r\n",
      "Requirement already satisfied: transformers<5.0.0,>=4.41.0 in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (4.47.0)\r\n",
      "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (4.67.1)\r\n",
      "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (1.2.2)\r\n",
      "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (1.13.1)\r\n",
      "Requirement already satisfied: huggingface-hub>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (0.29.0)\r\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.17.0)\r\n",
      "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.12.2)\r\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.4.2)\r\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\r\n",
      "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2024.12.0)\r\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.10/dist-packages (from torch) (1.13.1)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy==1.13.1->torch) (1.3.0)\r\n",
      "Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (24.2)\r\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (6.0.2)\r\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (2.32.3)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.6.1->wordcloud) (2.4.1)\r\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.41.0->sentence_transformers) (2024.11.6)\r\n",
      "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.41.0->sentence_transformers) (0.21.0)\r\n",
      "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.41.0->sentence_transformers) (0.4.5)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (3.0.2)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (1.3.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (4.55.3)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (1.4.7)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (3.2.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (2.9.0.post0)\r\n",
      "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->sentence_transformers) (1.4.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->sentence_transformers) (3.5.0)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.6.1->wordcloud) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.6.1->wordcloud) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.6.1->wordcloud) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.6.1->wordcloud) (2024.2.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (3.4.1)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (2.3.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (2025.1.31)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.6.1->wordcloud) (2024.2.0)\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install nltk wordcloud sentence_transformers torch\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9dc3352",
   "metadata": {
    "papermill": {
     "duration": 0.002802,
     "end_time": "2025-03-18T17:27:48.621080",
     "exception": false,
     "start_time": "2025-03-18T17:27:48.618278",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Loading necessary libraries.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "626d3fc8",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-18T17:27:48.629893Z",
     "iopub.status.busy": "2025-03-18T17:27:48.629402Z",
     "iopub.status.idle": "2025-03-18T17:28:16.958141Z",
     "shell.execute_reply": "2025-03-18T17:28:16.957078Z"
    },
    "papermill": {
     "duration": 28.335841,
     "end_time": "2025-03-18T17:28:16.960082",
     "exception": false,
     "start_time": "2025-03-18T17:27:48.624241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import seaborn as sns \n",
    "import matplotlib.pyplot as plt \n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "import torch\n",
    "from transformers import pipeline , AutoTokenizer , AutoModelForSequenceClassification\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "288723b4",
   "metadata": {
    "papermill": {
     "duration": 0.002772,
     "end_time": "2025-03-18T17:28:16.966202",
     "exception": false,
     "start_time": "2025-03-18T17:28:16.963430",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Loading the data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "266d83be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T17:28:16.973719Z",
     "iopub.status.busy": "2025-03-18T17:28:16.973023Z",
     "iopub.status.idle": "2025-03-18T17:28:17.069219Z",
     "shell.execute_reply": "2025-03-18T17:28:17.068319Z"
    },
    "papermill": {
     "duration": 0.10173,
     "end_time": "2025-03-18T17:28:17.070926",
     "exception": false,
     "start_time": "2025-03-18T17:28:16.969196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/airline-al-arabia-customer-reviews/df_cleaned.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c9b3c73f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T17:28:17.078615Z",
     "iopub.status.busy": "2025-03-18T17:28:17.078230Z",
     "iopub.status.idle": "2025-03-18T17:28:17.106183Z",
     "shell.execute_reply": "2025-03-18T17:28:17.105041Z"
    },
    "papermill": {
     "duration": 0.033601,
     "end_time": "2025-03-18T17:28:17.107803",
     "exception": false,
     "start_time": "2025-03-18T17:28:17.074202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>review</th>\n",
       "      <th>review_resume</th>\n",
       "      <th>verified</th>\n",
       "      <th>Type Of Traveller</th>\n",
       "      <th>Seat Type</th>\n",
       "      <th>Route</th>\n",
       "      <th>Seat Comfort</th>\n",
       "      <th>Cabin Staff Service</th>\n",
       "      <th>Ground Service</th>\n",
       "      <th>Value For Money</th>\n",
       "      <th>Recommended</th>\n",
       "      <th>Food &amp; Beverages</th>\n",
       "      <th>year</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>trip verified    the service was rude full of ...</td>\n",
       "      <td>full of attitude to me</td>\n",
       "      <td>1</td>\n",
       "      <td>Business</td>\n",
       "      <td>Premium Economy</td>\n",
       "      <td>London to New York</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2025</td>\n",
       "      <td>January</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>trip verified    this flight was a joke there ...</td>\n",
       "      <td>service was outrageous</td>\n",
       "      <td>1</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business Class</td>\n",
       "      <td>Chambery to London</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2025</td>\n",
       "      <td>January</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>trip verified    this time british airways man...</td>\n",
       "      <td>managed to get everything right</td>\n",
       "      <td>1</td>\n",
       "      <td>Business</td>\n",
       "      <td>Premium Economy</td>\n",
       "      <td>Gatwick to Antigua</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2025</td>\n",
       "      <td>March</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>trip verified    the seats were excellent with...</td>\n",
       "      <td>the seats were excellent</td>\n",
       "      <td>1</td>\n",
       "      <td>Couple Leisure</td>\n",
       "      <td>Premium Economy</td>\n",
       "      <td>Mumbai to London</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2025</td>\n",
       "      <td>February</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>trip verified    after the nightmare of gettin...</td>\n",
       "      <td>the crew were awful</td>\n",
       "      <td>1</td>\n",
       "      <td>Couple Leisure</td>\n",
       "      <td>Business Class</td>\n",
       "      <td>Nairobi to London</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2025</td>\n",
       "      <td>February</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                                             review  \\\n",
       "0           1  trip verified    the service was rude full of ...   \n",
       "1           2  trip verified    this flight was a joke there ...   \n",
       "2           3  trip verified    this time british airways man...   \n",
       "3           4  trip verified    the seats were excellent with...   \n",
       "4           5  trip verified    after the nightmare of gettin...   \n",
       "\n",
       "                     review_resume  verified Type Of Traveller  \\\n",
       "0           full of attitude to me         1          Business   \n",
       "1           service was outrageous         1          Business   \n",
       "2  managed to get everything right         1          Business   \n",
       "3         the seats were excellent         1    Couple Leisure   \n",
       "4              the crew were awful         1    Couple Leisure   \n",
       "\n",
       "         Seat Type               Route  Seat Comfort  Cabin Staff Service  \\\n",
       "0  Premium Economy  London to New York             1                    1   \n",
       "1   Business Class  Chambery to London             1                    1   \n",
       "2  Premium Economy  Gatwick to Antigua             5                    5   \n",
       "3  Premium Economy    Mumbai to London             5                    4   \n",
       "4   Business Class   Nairobi to London             4                    1   \n",
       "\n",
       "   Ground Service  Value For Money  Recommended  Food & Beverages  year  \\\n",
       "0               5                1            0                 1  2025   \n",
       "1               1                1            0                 2  2025   \n",
       "2               5                5            1                 4  2025   \n",
       "3               4                5            1                 3  2025   \n",
       "4               4                3            0                 2  2025   \n",
       "\n",
       "      Month  \n",
       "0   January  \n",
       "1   January  \n",
       "2     March  \n",
       "3  February  \n",
       "4  February  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4027c2fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T17:28:17.115773Z",
     "iopub.status.busy": "2025-03-18T17:28:17.115425Z",
     "iopub.status.idle": "2025-03-18T17:28:17.126395Z",
     "shell.execute_reply": "2025-03-18T17:28:17.125507Z"
    },
    "papermill": {
     "duration": 0.016693,
     "end_time": "2025-03-18T17:28:17.127967",
     "exception": false,
     "start_time": "2025-03-18T17:28:17.111274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(df.columns[0],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1a6bf597",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T17:28:17.136020Z",
     "iopub.status.busy": "2025-03-18T17:28:17.135677Z",
     "iopub.status.idle": "2025-03-18T17:28:17.511140Z",
     "shell.execute_reply": "2025-03-18T17:28:17.510089Z"
    },
    "papermill": {
     "duration": 0.382007,
     "end_time": "2025-03-18T17:28:17.513456",
     "exception": false,
     "start_time": "2025-03-18T17:28:17.131449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.isna().sum().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2913b158",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T17:28:17.523253Z",
     "iopub.status.busy": "2025-03-18T17:28:17.522913Z",
     "iopub.status.idle": "2025-03-18T17:28:17.536355Z",
     "shell.execute_reply": "2025-03-18T17:28:17.535506Z"
    },
    "papermill": {
     "duration": 0.020251,
     "end_time": "2025-03-18T17:28:17.538036",
     "exception": false,
     "start_time": "2025-03-18T17:28:17.517785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>review_resume</th>\n",
       "      <th>verified</th>\n",
       "      <th>Type Of Traveller</th>\n",
       "      <th>Seat Type</th>\n",
       "      <th>Route</th>\n",
       "      <th>Seat Comfort</th>\n",
       "      <th>Cabin Staff Service</th>\n",
       "      <th>Ground Service</th>\n",
       "      <th>Value For Money</th>\n",
       "      <th>Recommended</th>\n",
       "      <th>Food &amp; Beverages</th>\n",
       "      <th>year</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trip verified    the service was rude full of ...</td>\n",
       "      <td>full of attitude to me</td>\n",
       "      <td>1</td>\n",
       "      <td>Business</td>\n",
       "      <td>Premium Economy</td>\n",
       "      <td>London to New York</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2025</td>\n",
       "      <td>January</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>trip verified    this flight was a joke there ...</td>\n",
       "      <td>service was outrageous</td>\n",
       "      <td>1</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business Class</td>\n",
       "      <td>Chambery to London</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2025</td>\n",
       "      <td>January</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>trip verified    this time british airways man...</td>\n",
       "      <td>managed to get everything right</td>\n",
       "      <td>1</td>\n",
       "      <td>Business</td>\n",
       "      <td>Premium Economy</td>\n",
       "      <td>Gatwick to Antigua</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2025</td>\n",
       "      <td>March</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>trip verified    the seats were excellent with...</td>\n",
       "      <td>the seats were excellent</td>\n",
       "      <td>1</td>\n",
       "      <td>Couple Leisure</td>\n",
       "      <td>Premium Economy</td>\n",
       "      <td>Mumbai to London</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2025</td>\n",
       "      <td>February</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>trip verified    after the nightmare of gettin...</td>\n",
       "      <td>the crew were awful</td>\n",
       "      <td>1</td>\n",
       "      <td>Couple Leisure</td>\n",
       "      <td>Business Class</td>\n",
       "      <td>Nairobi to London</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2025</td>\n",
       "      <td>February</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0  trip verified    the service was rude full of ...   \n",
       "1  trip verified    this flight was a joke there ...   \n",
       "2  trip verified    this time british airways man...   \n",
       "3  trip verified    the seats were excellent with...   \n",
       "4  trip verified    after the nightmare of gettin...   \n",
       "\n",
       "                     review_resume  verified Type Of Traveller  \\\n",
       "0           full of attitude to me         1          Business   \n",
       "1           service was outrageous         1          Business   \n",
       "2  managed to get everything right         1          Business   \n",
       "3         the seats were excellent         1    Couple Leisure   \n",
       "4              the crew were awful         1    Couple Leisure   \n",
       "\n",
       "         Seat Type               Route  Seat Comfort  Cabin Staff Service  \\\n",
       "0  Premium Economy  London to New York             1                    1   \n",
       "1   Business Class  Chambery to London             1                    1   \n",
       "2  Premium Economy  Gatwick to Antigua             5                    5   \n",
       "3  Premium Economy    Mumbai to London             5                    4   \n",
       "4   Business Class   Nairobi to London             4                    1   \n",
       "\n",
       "   Ground Service  Value For Money  Recommended  Food & Beverages  year  \\\n",
       "0               5                1            0                 1  2025   \n",
       "1               1                1            0                 2  2025   \n",
       "2               5                5            1                 4  2025   \n",
       "3               4                5            1                 3  2025   \n",
       "4               4                3            0                 2  2025   \n",
       "\n",
       "      Month  \n",
       "0   January  \n",
       "1   January  \n",
       "2     March  \n",
       "3  February  \n",
       "4  February  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad465264",
   "metadata": {
    "papermill": {
     "duration": 0.00417,
     "end_time": "2025-03-18T17:28:17.546773",
     "exception": false,
     "start_time": "2025-03-18T17:28:17.542603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 11466074,
     "datasetId": 6871270,
     "sourceId": 11077614,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 39.564872,
   "end_time": "2025-03-18T17:28:20.219887",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-18T17:27:40.655015",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
